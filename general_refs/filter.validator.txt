Created by Fernando Vazquez, last modified on Oct 15, 2021Go to start of metadata
The library supports both Service to Service and End User Authentication type requests. 
The library uses the core OAuth2 libraries to support protocol support as well as verification 
and validation of tokens; including access, identity, and opaque tokens.  The library is OAuth2
 and OIDC compliant, thus capable of being used with any OIDC compliant Identity Providers (IdPs).

The latest version (3.0+) of the library artifacts are located in Nexus at:

https://nexus-tools.swacorp.com/ISS/content/repositories/[ENV]/com/swacorp/security/sec-oidc-spring-simple-filter/

To include the library in your project add the following to your build.gradle file:

implementation group: 'com.swacorp.security', 
name: 'sec-oidc-spring-simple-filter', 
version: '3.0.x-xx'

To implement the default caching with ehcache, you will need to add the following to
 your build.gradle file:

implementation group: 'org.springframework.boot', 
name: 'spring-boot-starter-cache', 
version: '2.2.2.RELEASE'

implementation group: 'javax.cache', name: 'cache-api', version: '1.1.1'

implementation group: 'org.ehcache', name: 'ehcache', version: '3.8.0'

Verification Flow
The library will perform token verification and validation as follows:

If an `org.springframework.security.core.Authentication` instance is not present or if 
present and its `isAuthentated` returns a false, the filter will:

Attempt to find an Access Token in the configured header/cookie. If not configured, the filter 
will look in the following places:
HTTP headers:
Authorization
swa_access_token
Cookies:
swa_access_token
If an access token is not found, the filter will terminate and respond with an 
OIDC complaint error.

Attempt to find an Identity Token in the configured header/cookie. If not configured, 
the filter will look in the following places:
HTTP headers:
swa_id_token
Cookies:
swa_id_token
Always perform signature validation,
Perform introspection call, except as noted below,
Validate issuer, audience, exp, nbf, and scopes (if defined)
The above tasks are delegated to the OAuth2 core libraries.

After validation has been completed, the filter will add an `org.springframework.security.core.Authentication` 
instance to the Spring security context and allow the rest of the chain to process. 
The `org.springframework.security.core.Authentication` will include the claims configured or 
if none specified, it will include `scope` and `groups` from both the access token and id 
tokens (if present).

If a `org.springframework.security.core.Authentication` instance is present and 
its `isAuthentated` 
returns a true, the filter will:

1. Delegate the token validation to the OAuth core libraries, which may or may not perform
 introspection depending the ITO claim or if the default 15 minutes has expired.

Configuration
The library can be configured to support different types of IdPs configurations and claims. 
During initialization, the library can be configured to support audience, issuer, and scope 
claims. The library will look for a file named security-odic.properties in your class path.

The minimal configuration for SWA's PingFederate IdP, is as follows:


security-odic.properites
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
## ---------------------- Authorizer ----------------------
 
#
# (Required) At least one is required. These are the IDPs that can fulfill calls to the user 
introspection, userInfo, and JWKS end points. If you expect tokens from different IdPs, you may
 define
# them using following format:
#
# security.authorizer.idpDiscoveryURLs[0]=https://idpaws.cis.qa.swacorp.com/SecureAuth39/.well-known/openid-configuration
# security.authorizer.idpDiscoveryURLs[1]=https://pingiamsso.cissec.dend.dev.aws.swacorp.com
#
security.authorizer.idpDiscoveryURLs=https://pingiamsso.cissec.dend.dev.aws.swacorp.com
 
#
# (Required) Client credentials assigned to your resource server to support introspection 
and user info calls as required. Format: <client_id>:<client_secret>
#
security.authorizer.clientCredentials.https\://pingiamsso.cissec.dend.dev.aws.swacorp.com=${client_crentials}
 
#
# (Required) Your Resource Server URI as known by the IdP(s) issuing the in-bound token,
 if you specify more than, at least 1 has to match the aud claim:
# 
#
security.authorizer.audience=https://myresource.server.aws.swacorp.com
 
#
# (Optional) At least one of the following items must appear in the scope claim
#
security.authorizer.scopes[0]=group_one
security.authorizer.scopes[1]=email


Automatic Registration
(Spring will register the Authorizer Filter in a logical point)

 In the security-oauth.properties file: `security.authorizer.autoRegister=true`or it can
  be added as code (example):

@Configuration
@EnableWebSecurity
@ComponentScan("sec.oidc.spring.simple.filter")
public class SecurityConfig extends WebSecurityConfigurerAdapter {
     
    @Autowired
    AuthorizerFilter authorizer;
     
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.addFilterAfter(authorizer, AbstractPreAuthenticatedProcessingFilter.class)
        .authorizeRequests()
        .anyRequest().authenticated()
        .and()
        .csrf().disable();
    }
}
or XML Configuration:

<http>
    <custom-filter after="PRE_AUTH_FILTER" ref="oAuth2Filter" />
</http>
<beans:bean id="oAuth2Filter" class="sec.oauth.java.spring.filter.authorizer.AuthorizerFilter"/>


By-passing endpoints
If you wish to allow certain end points to allow anonymous users, 
update the security-oauth.properties as follows:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
Optional) list of comma separated paths that are to skip authentication validation. 
Items can include the HTTP Method to by pass, such at GET:/path, otherwise,
the path is by passed regardless of HTTP Method. At least GET:/ipdresponse should be 
set when working with the controller.
  
security.authorizer.byPassPaths[0]=GET:/idpresponse
security.authorizer.byPassPaths[0]=/anonymous-path
 
or via code by creating a Configuration class the extends WebSecurityConfigurerAdapter and
 overriding (example) :
 
 
@Configuration
@EnableWebSecurity
@ComponentScan("sec.oidc.spring.simple.filter")
public class SecurityConfig extends WebSecurityConfigurerAdapter {
     
    @Autowired
    AuthorizerFilter authorizer;
     
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.addFilterAfter(authorizer, AbstractPreAuthenticatedProcessingFilter.class)
        .authorizeRequests()
        .anyRequest().authenticated()
        .and()
        .csrf().disable();
    }
 
    @Override
    public void configure(WebSecurity web) {
        web.ignoring().antMatchers("/assets").antMatchers(HttpMethod.OPTIONS, "/test");
    }
     
     
}
OAuth Client & Secret
Depending on your setup the Authorizer Filter will require a client_secret. 
You can substitute its value as follows:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
security-odic.properties:
 
security.authorizer.clientCredentials.https\://idpaws.cis.qa.swacorp.com/SecureAuth39/.well-known/openid-configuration=${client_crentials}
 
XML Configuration:
 
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd ">
 
    <context:property-placeholder
        properties-ref="myProperties" />
 
    <bean id="client_secret" class="java.lang.String">
        <constructor-arg
            value="f460338e2c6795fc57997c398f465556b57ccd8ce10b083a9e09f4ea382b007f" />
    </bean>
     
    <bean id="client_id" class="java.lang.String">
        <constructor-arg
            value="0c6141093c6144339b643981de9130a5" />
    </bean>
 
    <bean id="myProperties"
        class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="singleton" value="true" />
        <property name="properties">
            <props>
                <prop key="client_crentials">#{client_id}:#{client_secret}</prop>
            </props>
        </property>
    </bean>
</beans>
Caching
Per the direction of our architects, caching is no longer tied to the session by default.
 Caching must now be configured using your favorit JSR-107 provider. The library has a default 
 ehcache setting and can be configured in your spring configuration xml (or appropriate) file as 
 follows (example):



1
2
3
4
5
6
7
8
9
10
11
12
13
<bean id="cacheConfiguration" class="java.lang.String">
     <constructor-arg value="#{ new org.springframework.core.io.ClassPathResource('/csifa-default-ehcache.xml').getURI().toString() }" />
 </bean>
 
 <bean id="cacheManager"
     class="org.springframework.cache.jcache.JCacheCacheManager">
     <property name="cacheManager">
         <bean
             class="org.springframework.cache.jcache.JCacheManagerFactoryBean">
             <property name="cacheManagerUri" ref="cacheConfiguration"/>
         </bean>
     </property>
 </bean>
The default each settings are as follows:



1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
<config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://www.ehcache.org/v3"
    xmlns:jsr107="http://www.ehcache.org/v3/jsr107"
    xsi:schemaLocation=" http://www.ehcache.org/v3
    http://www.ehcache.org/schema/ehcache-core-3.0.xsd http://www.ehcache.org/v3/jsr107
    http://www.ehcache.org/schema/ehcache-107-ext-3.0.xsd">
    <service>
        <jsr107:defaults enable-management="true"
            enable-statistics="true" />
    </service>
    <cache-template name="default">
        <expiry>
            <!-- Per RA, tokens should be checked for revocation every 15 minutes -->
            <ttl unit="minutes">15</ttl>
        </expiry>
        <resources>
            <heap unit="MB">26</heap>
            <offheap unit="MB">52</offheap>
        </resources>
    </cache-template>
    <cache alias="sec.oidc.spring.simple.filter.authorizer"
        uses-template="default">
        <key-type>java.lang.String</key-type>
        <value-type>java.lang.Object</value-type>
    </cache>
</config>